import java.util.Scanner;
import java.util.regex.Pattern;
public class Calculator {
    private static final Pattern ROMAN_PATTERN = Pattern.compile("^(M?)(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$");

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Введите выражение: ");
        String expression = scanner.nextLine();

        String[] parts = expression.split(" "); // Разделение выражения на операнды и оператор

        String operand1 = parts[0];
        String operator = parts[1];
        String operand2 = parts[2];

        boolean isRoman = isRomanNumber(operand1) && isRomanNumber(operand2);

        int result;
        if (isRoman) {
            int num1 = romanToArabic(operand1);
            int num2 = romanToArabic(operand2);
            result = calculate(num1, operator, num2);
            System.out.println(arabicToRoman(result));
        } else {
            int num1 = Integer.parseInt(operand1);
            int num2 = Integer.parseInt(operand2);
            result = calculate(num1, operator, num2);
            System.out.println(result);
        }
    }

    private static boolean isRomanNumber(String input) {
        return ROMAN_PATTERN.matcher(input).matches();
    }

    private static int romanToArabic(String input) {
        int result = 0;

        String romanNumeral = input.toUpperCase();
        for (int i = 0; i < romanNumeral.length(); i++) {
            char ch = romanNumeral.charAt(i);

            if (ch == 'M') {
                result += 1000;
            } else if (ch == 'D') {
                result += 500;
            } else if (ch == 'C') {
                if (i + 1 < romanNumeral.length()) {
                    char nextCh = romanNumeral.charAt(i + 1);
                    if (nextCh == 'M' || nextCh == 'D') {
                        result -= 100;
                    } else {
                        result += 100;
                    }
                } else {
                    result += 100;
                }
            } else if (ch == 'L') {
                result += 50;
            } else if (ch == 'X') {
                if (i + 1 < romanNumeral.length()) {
                    char nextCh = romanNumeral.charAt(i + 1);
                    if (nextCh == 'C' || nextCh == 'L') {
                        result -= 10;
                    } else {
                        result += 10;
                    }
                } else {
                    result += 10;
                }
            } else if (ch == 'V') {
                result += 5;
            } else if (ch == 'I') {
                if (i + 1 < romanNumeral.length()) {
                    char nextCh = romanNumeral.charAt(i + 1);
                    if (nextCh == 'X' || nextCh == 'V') {
                        result -= 1;
                    } else {
                        result += 1;
                    }
                } else {
                    result += 1;
                }
            }
        }

        return result;
    }

    private static String arabicToRoman(int num) {
        if (num <= 0 || num >= 4000) {
            throw new IllegalArgumentException("Невозможно представить в римской системе счисления");
        }

        StringBuilder sb = new StringBuilder();
        while (num >= 1000) {
            sb.append("M");
            num -= 1000;
        }
        while (num >= 900) {
            sb.append("CM");
            num -= 900;
        }
        while (num >= 500) {
            sb.append("D");
            num -= 500;
        }
        while (num >= 400) {
            sb.append("CD");
            num -= 400;
        }
        while (num >= 100) {
            sb.append("C");
            num -= 100;
        }
        while (num >= 90) {
            sb.append("XC");
            num -= 90;
        }
        while (num >= 50) {
            sb.append("L");
            num -= 50;
        }
        while (num >= 40) {
            sb.append("XL");
            num -= 40;
        }
        while (num >= 10) {
            sb.append("X");
            num -= 10;
        }
        while (num >= 9) {
            sb.append("IX");
            num -= 9;
        }
        while (num >= 5) {
            sb.append("V");
            num -= 5;
        }
        while (num >= 4) {
            sb.append("IV");
            num -= 4;
        }
        while (num >= 1) {
            sb.append("I");
            num -= 1;
        }

        return sb.toString();
    }

    private static int calculate(int operand1, String operator, int operand2) {
        int result = 0;
        if (operator.equals("+")) {
            result = operand1 + operand2;
        } else if (operator.equals("-")) {
            result = operand1 - operand2;
        } else if (operator.equals("*")) {
            result = operand1 * operand2;
        } else if (operator.equals("/")) {
            result = operand1 / operand2;
        } else {
            throw new IllegalArgumentException("Недопустимый оператор: " + operator);
        }
        return result;
    }
}
